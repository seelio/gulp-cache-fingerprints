// Generated by CoffeeScript 1.8.0
(function() {
  var Cache, Git, GitHasher, Options, ShaHasher, gutil, relpathToFile, through;

  through = require("through2");

  gutil = require("gulp-util");

  Options = require("./lib/options");

  Git = require("./lib/git");

  Cache = require("./lib/cache");

  GitHasher = require("./lib/hashers/git");

  ShaHasher = require("./lib/hashers/sha");

  relpathToFile = function(filePath, workingPath) {
    return filePath.replace(new RegExp("^" + workingPath + "/?"), "");
  };

  module.exports = function(opts) {
    var cache, flush, git, githasher, options, shahasher, transform, transformHelper;
    if (opts == null) {
      opts = {};
    }
    options = new Options(opts);
    cache = new Cache(options);
    git = new Git(options);
    githasher = new GitHasher;
    shahasher = new ShaHasher;
    transformHelper = function(file, enc, done) {
      var cacheTheHash, fileRelpath;
      fileRelpath = relpathToFile(file.path, git.abspathToWorkingDir());
      cacheTheHash = function(err, hash) {
        if (err != null) {
          return done(err);
        }
        cache.set(fileRelpath, hash);
        return done();
      };
      return git.getFile(fileRelpath, function(err, gitEntry) {
        if (gitEntry != null) {
          return githasher.hash(file, gitEntry, cacheTheHash);
        } else {
          return shahasher.hash(file, gitEntry, cacheTheHash);
        }
      });
    };
    transform = function(file, enc, done) {
      if (file.isDirectory()) {
        return done();
      }
      if (git.repo) {
        return transformHelper(file, enc, done);
      } else {
        return git.initialize(function(err) {
          if (err) {
            return done(err);
          }
          return transformHelper(file, enc, done);
        });
      }
    };
    flush = function(done) {
      return cache.write(function(err) {
        if (err != null) {
          return done(err);
        }
        gutil.log("Cached " + (cache.keys().length) + " hashes to " + (cache.cachePath()));
        return done();
      });
    };
    return through.obj(transform, flush);
  };

}).call(this);
