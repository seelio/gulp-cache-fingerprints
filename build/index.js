// Generated by CoffeeScript 1.8.0
(function() {
  var Cache, Git, Options, Sha, fs, gutil, path, relpathToFile, through;

  fs = require("fs");

  path = require("path");

  through = require("through2");

  gutil = require("gulp-util");

  Options = require("./lib/options");

  Git = require("./lib/git");

  Sha = require("./lib/sha");

  Cache = require("./lib/cache");

  relpathToFile = function(filePath, workingPath, basePath) {
    return filePath.replace(new RegExp("^" + workingPath + "/?"), "");
  };

  module.exports = function(opts) {
    var cache, flush, getTheHash, git, options, sha, transform, transformHelper;
    if (opts == null) {
      opts = {};
    }
    options = new Options(opts);
    git = new Git(options);
    sha = new Sha;
    cache = new Cache(options);
    getTheHash = function(file, done) {
      var fileRelpath, found, notFound;
      fileRelpath = relpathToFile(file.path, git.abspathToWorkingDir());
      found = function(entry) {
        cache.set(fileRelpath, entry.sha());
        return done();
      };
      notFound = function(err) {
        var digest;
        if (file.isBuffer()) {
          digest = sha.digest(file.contents);
          cache.set(fileRelpath, digest);
          return done();
        } else if (file.isStream()) {
          return done(new Error("streams aren't supported"));
        }
      };
      return git.getFile(fileRelpath, function(err, file) {
        if (file != null) {
          return found(file);
        } else {
          return notFound();
        }
      });
    };
    transformHelper = function(file, enc, done) {
      return getTheHash(file, done);
    };
    transform = function(file, enc, done) {
      if (file.isDirectory()) {
        return done();
      }
      if (file.isNull()) {
        return done(new Error("file is null, can't hash"));
      }
      if (git.repo) {
        return transformHelper(file, enc, done);
      } else {
        return git.initialize(function(err) {
          if (err) {
            return done(err);
          }
          return transformHelper(file, enc, done);
        });
      }
    };
    flush = function(done) {
      return cache.write(function(err) {
        if (err != null) {
          return done(err);
        }
        gutil.log("Cached " + (cache.keys().length) + " hashes to " + (cache.cachePath()));
        return done();
      });
    };
    return through.obj(transform, flush);
  };

}).call(this);
